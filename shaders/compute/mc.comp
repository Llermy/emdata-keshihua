#version 430

layout (std430, binding=0) buffer triInd_data
{
    uint triTableIndices[];
};

layout (std430, binding=1) buffer volume_data
{
    float volData[];
};

layout (std430, binding=2) buffer mcparam_data
{
    float edgeLength;
    float threshold;
    int size[3];
};

layout (std430, binding=3) buffer vertices_data
{
    float vertices[];
};

layout (std430, binding=4) buffer vertsnumsum_data
{
    uint vertsNumSum[];
};

layout (std430, binding=5) buffer tritable_data
{
    uint triTable[256][16];
};

uint xyzToIndex(uint x, uint y, uint z)
{
    return x + y*size[0] + z*size[0]*size[1];
}

uint xyzToIndex(uvec3 pos)
{
    return pos.x + pos.y*size[0] + pos.z*size[0]*size[1];
}

// 计算某个体素对应的triTable行
int voxelToTableIndex(uint x, uint y, uint z)
{
    float cube[8] = {
        volData[xyzToIndex(x, y+1, z)],
        volData[xyzToIndex(x+1, y+1, z)],
        volData[xyzToIndex(x+1, y+1, z+1)],
        volData[xyzToIndex(x, y+1, z+1)],
        volData[xyzToIndex(x, y, z)],
        volData[xyzToIndex(x+1, y, z)],
        volData[xyzToIndex(x+1, y, z+1)],
        volData[xyzToIndex(x, y, z+1)]
    };

    int refIndex = 0;
    for(int i = 0; i < 8; i++) {
        if(cube[i] > threshold)
            refIndex |= 1 << i;
    }
    return refIndex;
}

layout(local_size_x = 1, local_size_y = 1) in;
void main() {
    uint arrayInd = gl_GlobalInvocationID.x
        + gl_GlobalInvocationID.y*(size[0]-1)
        + gl_GlobalInvocationID.z*(size[0]-1)*(size[1]-1);
    uint tableIndex = voxelToTableIndex(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
    triTableIndices[arrayInd] = tableIndex;
}